library(knitr)
library(dplyr)
library(magrittr)
library(extraDistr)
# Visualization
#par(mfrow=c(2,1))
plot(y, xlab =" index", ylab = "Y",col=2,type = "l",
main = "Probability of Y\n before Burn-in and Thinning")
# setup
n = 30
ln_mean = 3.442
ln_var = 2.182
# setup
n = 30
ln_mean = 3.442
ln_var = 2.182
# define MC steps
iters = 5000
# exponentiate var
vr = exp(ln_var)
# construct an empty matrix of results for iterations
# init y0 and tau - Markov chain sequence
y = rep(0.0, iters)
tau = rep(0.0, iters)
# set the value of the first element
tau[1] = round(1 / (2*vr),3)
# Gibbs sampling
i = 2 # or use for{} but end with i=2:(iters - 1)
while (i<iters) {
mu = ln_mean
sigma = sqrt(1/(2*n*tau[i-1]))
y[i] = rnorm(1,mu, sigma )
SSQ = ((n-1)* ln_var + n*(y[i] - ln_mean)**2)
a = n/2
r = SSQ
tau[i] = rgamma(n=1, shape = a, scale = r )
i=i+1
}
# Describe tau and y
print("Tau:")
summary(tau)
print("Y:")
summary(y)
# Visualization
#par(mfrow=c(2,1))
plot(y, xlab =" index", ylab = "Y",col=2,type = "l",
main = "Probability of Y\n before Burn-in and Thinning")
# Visualization
#par(mfrow=c(2,1))
plot(y, xlab =" index", ylab = "Y",col=2,type = "l",
main = "Probability of Y\n before Burn-in and Thinning")
plot(tau, xlab =" index", ylab = "Tau",col=2,type = "l",
main = "Probability of Tau\n before Burn-in and Thinning")
#par(mfrow=c(2,1))
plot(y_tk, xlab =" index", ylab = "Y",col=2,type = "l",
main = "Probability of Y\n after Burn-in and Thinning")
# Burn-in and thinning
# Burn-in effect by removing the first k elements
# thinning effect with 20 steps
k=iters/25 +1
step_sz = 20
tk = seq(from= k, to=iters, by=step_sz)
tk
tau_tk = tau[tk]
y_tk = y[tk]
#par(mfrow=c(2,1))
plot(y_tk, xlab =" index", ylab = "Y",col=2,type = "l",
main = "Probability of Y\n after Burn-in and Thinning")
plot(tau_tk, xlab =" index", ylab = "Tau",col=2,type = "l",
main = "Probability of Tau\n after Burn-in and Thinning")
# Confidence intervals for MC sample
sigma_sqr = 1 / (2 * tau)
E_x = exp(y + 0.5 * sigma_sqr)
Var_x = E_x^2 *(exp(sigma_sqr) - 1)
# Confidence intervals for MC sample
sigma_sqr = 1 / (2 * tau)
E_x = exp(y + 0.5 * sigma_sqr)
Var_x = E_x^2 *(exp(sigma_sqr) - 1)
(paste("Expectation value: ",E_x))
(paste("Variance: ",Var_x))
# Confidence intervals for MC sample
sigma_sqr = 1 / (2 * tau)
E_x = exp(y + 0.5 * sigma_sqr)
Var_x = E_x^2 *(exp(sigma_sqr) - 1)
print("Expectation value: ")
summary(E_x)
print("Variance: ")
summary(Var_x)
quantiles = c(0.025, 0.05, 0.95, 0.975)
# Confidence intervals for E[X]
q_E_x = quantile(E_x,quantiles)
(q_E_x)
# Confidence intervals for Var[X]
q_Var_x = quantile(Var_x,quantiles)
(q_Var_x)
quantiles = c(0.025, 0.05, 0.95, 0.975)
# Confidence intervals for E[X]
print(" Confidence intervals for E[X]: ")
q_E_x = quantile(E_x,quantiles)
(q_E_x)
# Confidence intervals for Var[X]
q_Var_x = quantile(Var_x,quantiles)
print(" Confidence intervals for Var[X]: ")
(q_Var_x)
quantiles = c(0.025, 0.05, 0.95, 0.975)
# Confidence intervals for E[X]
q_E_x = quantile(E_x,quantiles)
print(" Confidence intervals for E[X]: ")
print(q_E_x)
# Confidence intervals for Var[X]
q_Var_x = quantile(Var_x,quantiles)
print(" Confidence intervals for Var[X]: ")
print(q_Var_x)
library(knitr)
library(dplyr)
library(magrittr)
library(extraDistr)
library(EBImage)
# Visualize the task
tsk = readImage("task1.png")
display(tsk)
#
# distribution of rocks due to levels
df = data.frame(Level =factor(c("F1", "F2", "F3")) ,
Brown=c(5,1,1), Green=c(2, 1, 6), White=c(1,2,9),
prob_F = c(0.25, 0.5,0.25))
total = c(sum(df[1,c(2:4)]),sum(df[2,c(2:4)]),sum(df[3,c(2:4)]))
df = cbind(df,total)
df
# probabilities
prbs_lklhd = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_lklhd
# to obtain brown rock from F
Pr_brown = df[1,5] * prbs_lklhd[1,2] + df[2,5] * prbs_lklhd[2,2] + df[3,5] * prbs_lklhd[3,2]
Pr_brown
# to obtain green rock from F
Pr_green = df[1,5] * prbs_lklhd[1,3] + df[2,5] * prbs_lklhd[2,3] + df[3,5] * prbs_lklhd[3,3]
Pr_green
# to obtain white rock from F
Pr_white = df[1,5] * prbs_lklhd[1,4] + df[2,5] * prbs_lklhd[2,4] + df[3,5] * prbs_lklhd[3,4]
Pr_white
#Join into the table
Pr_colour = data.frame(
Level = factor("F") ,
Brown=Pr_brown,
Green=Pr_green,
White=Pr_white,
prob_F = "---",
total = sum(Pr_brown, Pr_green, Pr_white))
# as one can see result is proved as sum of probabilities for each rock equals 1
df = rbind(df, Pr_colour)
df
F = rbind(prbs_lklhd, Pr_colour[,-5]) %>%
mutate(total_Pr= c(sum(prbs_lklhd[1,c(2:4)]),
sum(prbs_lklhd[2,c(2:4)]),
sum(prbs_lklhd[3,c(2:4)]),
sum(Pr_brown, Pr_green, Pr_white)))
F = F[, -5]
F
results = F[4,]
results
kable(F)
table %>% F
F %>% table
# Visualize the task
tsk = readImage("task1.png")
display(tsk)
library(knitr)
library(dplyr)
library(magrittr)
library(extraDistr)
library("png")
# Visualize the task
tsk<- readPNG("task1.png")
plot.new()
rasterImage(tsk,0,0,1,1)
# Visualize the task
tsk<- readPNG("task1.png")
plot.new()
rasterImage(tsk)
# Visualize the task
tsk<- readPNG("task1.png")
plot.new(tsk)
library(imager)
install.packages("imager")
library(imager)
# tsk<- readPNG("task1.png")
# plot.new(tsk)
# # rasterImage(tsk)
im<-load.image("task1.png")
library(knitr)
library(dplyr)
library(magrittr)
library(extraDistr)
library("png")
# Visualize the task
tsk<- readPNG("task1.png")
plot.new(tsk)
# Visualize the task
tsk<- readPNG("task1.png")
plot.new(tsk)
library(knitr)
library(dplyr)
library(magrittr)
library(extraDistr)
library("png")
# Visualize the task
tsk<- readPNG("task1.png")
plot.new()
rasterImage(tsk,0,0,1,1)
#
# distribution of rocks due to levels
df = data.frame(Level =factor(c("F1", "F2", "F3")) ,
Brown=c(5,1,1), Green=c(2, 1, 6), White=c(1,2,9),
prob_F = c(0.25, 0.5,0.25))
total = c(sum(df[1,c(2:4)]),sum(df[2,c(2:4)]),sum(df[3,c(2:4)]))
df = cbind(df,total)
df
F = rbind(prbs_lklhd, Pr_colour[,-5]) %>%
mutate(total_Pr= c(sum(prbs_lklhd[1,c(2:4)]),
sum(prbs_lklhd[2,c(2:4)]),
sum(prbs_lklhd[3,c(2:4)]),
sum(Pr_brown, Pr_green, Pr_white)))
F = F[, -5]
F
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_
# to obtain brown rock from F
Pr_brown = df[1,5] * prbs_[1,2] + df[2,5] * prbs_[2,2] + df[3,5] * prbs_[3,2]
Pr_brown
# to obtain green rock from F
Pr_green = df[1,5] * prbs_[1,3] + df[2,5] * prbs_[2,3] + df[3,5] * prbs_[3,3]
Pr_green
# to obtain white rock from F
Pr_white = df[1,5] * prbs_[1,4] + df[2,5] * prbs_[2,4] + df[3,5] * prbs_[3,4]
Pr_white
#Join into the table
Pr_colour = data.frame(
Level = factor("F") ,
Brown=Pr_brown,
Green=Pr_green,
White=Pr_white,
prob_F = "---",
total = sum(Pr_brown, Pr_green, Pr_white))
# as one can see result is proved as sum of probabilities for each rock equals 1
df = rbind(df, Pr_colour)
df
F = rbind(prbs_, Pr_colour[,-5]) %>%
mutate(total_Pr= c(sum(prbs_[1,c(2:4)]),
sum(prbs_[2,c(2:4)]),
sum(prbs_[3,c(2:4)]),
sum(Pr_brown, Pr_green, Pr_white)))
F = F[, -5]
F
# to obtain brown rock from F
Pr_brown = df[1,5] * prbs_[1,2] + df[2,5] * prbs_[2,2] + df[3,5] * prbs_[3,2]
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
#
# distribution of rocks due to levels
df = data.frame(Level =factor(c("F1", "F2", "F3")) ,
Brown=c(5,1,1), Green=c(2, 1, 6), White=c(1,2,9),
prob_F = c(0.25, 0.5,0.25))
total = c(sum(df[1,c(2:4)]),sum(df[2,c(2:4)]),sum(df[3,c(2:4)]))
df = cbind(df,total)
df
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_
# probabilities
prbs_ = data.frame(Level = factor(c("F1", "F2", "F3")),
Brown = df$Brown %o% 1/df$total,
Green = df$Green %o% 1/df$total,
White = df$White %o% 1/df$total,
total = df$total)
prbs_
# to obtain brown rock from F
Pr_brown = df[1,5] * prbs_[1,2] + df[2,5] * prbs_[2,2] + df[3,5] * prbs_[3,2]
(paste(" The probability for brown rock type :",Pr_brown))
# to obtain green rock from F
Pr_green = df[1,5] * prbs_[1,3] + df[2,5] * prbs_[2,3] + df[3,5] * prbs_[3,3]
(paste(" The probability for the green rock type :",Pr_green))
# to obtain white rock from F
Pr_white = df[1,5] * prbs_[1,4] + df[2,5] * prbs_[2,4] + df[3,5] * prbs_[3,4]
(paste(" The probability for the white rock type :",Pr_white))
plot(tau, xlab =" index", ylab = "Tau",col=2,type = "l",
main = "Probability of Tau\n before Burn-in and Thinning")
